{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled0.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ilhamlotov/Pemograman-Phyton/blob/main/ILHAM_1101184056_TT-43-G2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UCgIDq5ff2dm",
        "outputId": "087e0426-b820-4877-df0c-e60f6a9bf400"
      },
      "source": [
        "cd /content/drive/MyDrive/Colab Notebooks"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/Colab Notebooks\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-3DGaY5YSPpr",
        "outputId": "be9e6be3-27a5-4f95-b14b-f643b1073645"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XgQh-5NChz52",
        "outputId": "4dfa141d-a730-4a17-84b1-c1e6671f7a76"
      },
      "source": [
        "Cd /content/drive/MyDrive/3scene"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[0m\u001b[01;34mdataset\u001b[0m/  \u001b[01;34mtugas11\u001b[0m/  Untitled0.ipynb\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W_BDqWXBh3q9"
      },
      "source": [
        "# import the necessary packages\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Activation\n",
        "from keras.layers.core import Flatten\n",
        "from keras.layers.core import Dense\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from PIL import Image\n",
        "from imutils import paths\n",
        "import numpy as np\n",
        "import os"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3WkXSU2lh752",
        "outputId": "fc1188d8-859c-4e0f-847a-d3d2c568799f"
      },
      "source": [
        "# grab all image paths in the input dataset directory, then initialize\n",
        "# our list of images and corresponding class labels\n",
        "print(\"[INFO] loading images...\")\n",
        "imagePaths = paths.list_images(\"tugas11\")\n",
        "data = []\n",
        "labels = []"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] loading images...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UEP1pOeciBSd"
      },
      "source": [
        "# loop over our input images\n",
        "for imagePath in imagePaths:\n",
        "\t# load the input image from disk, resize it to 32X32 pixels, scale\n",
        "\t# the pixel intensities to the range [0, 1], and then update our\n",
        "\t# images list\n",
        "\timage = Image.open(imagePath)\n",
        "  #preprocessing\n",
        "\timage = np.array(image.resize((32, 32))) / 255.0 #normalisasi\n",
        "\tdata.append(image)\n",
        "\n",
        "\t# extract the class label from the file path and update the\n",
        "\t# labels list\n",
        "\tlabel = imagePath.split(os.path.sep)[-2]\n",
        "\tlabels.append(label)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "909CZxHtmHnS",
        "outputId": "8236c3e8-4f57-4588-9718-19b018f8745b"
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ISXCDpn6mKmn"
      },
      "source": [
        "lb = LabelBinarizer()\n",
        "labels = lb.fit_transform(labels)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVHgH8g2mM7p",
        "outputId": "7ad7a50f-6ca5-439d-9ea0-c82ebbddaa7f"
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 0 0 0 0]\n",
            " [1 0 0 0 0]\n",
            " [1 0 0 0 0]\n",
            " ...\n",
            " [0 0 0 1 0]\n",
            " [0 0 0 1 0]\n",
            " [0 0 0 1 0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D47h_vWhmPwJ",
        "outputId": "80507609-cf5a-4e95-cae1-14ba8f57a3a1"
      },
      "source": [
        "# perform a training and testing split, using 75% of the data for\n",
        "# training and 25% for evaluation\n",
        "(trainX, testX, trainY, testY) = train_test_split(np.array(data),\tnp.array(labels), test_size=0.25, shuffle=True)\n",
        "print(trainX.shape)\n",
        "print(testX.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(438, 32, 32, 3)\n",
            "(146, 32, 32, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EQy0A0C0mUWu",
        "outputId": "208f9718-e4fb-4e5f-c916-f4e18aa0071c"
      },
      "source": [
        "from keras.layers import Convolution2D, MaxPooling2D\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Flatten, Dense\n",
        "\n",
        "model1 = Sequential()\n",
        "model1.add(Convolution2D(32, (3,3), activation='relu', input_shape=(32,32,3)))\n",
        "model1.add(MaxPooling2D(2,2))\n",
        "model1.add(Convolution2D(64, (3,3), activation='relu'))\n",
        "model1.add(MaxPooling2D(2,2))\n",
        "model1.add(Convolution2D(64, (3,3), activation='relu'))\n",
        "model1.add(MaxPooling2D(2,2))\n",
        "#fully connected layer\n",
        "model1.add(Flatten())\n",
        "model1.add(Dense(100, activation='relu'))\n",
        "model1.add(Dense(5, activation='softmax'))\n",
        "\n",
        "model1.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 30, 30, 32)        896       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 15, 15, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 13, 13, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 6, 6, 64)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 4, 4, 64)          36928     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 2, 2, 64)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 100)               25700     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 5)                 505       \n",
            "=================================================================\n",
            "Total params: 82,525\n",
            "Trainable params: 82,525\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6J-_Z8x8mYQp",
        "outputId": "838b408a-41af-4c00-90f4-e3dac4aef436"
      },
      "source": [
        "# train the model using the Adam optimizer\n",
        "print(\"[INFO] training network...\")\n",
        "opt = Adam(lr=1e-3, decay=1e-3 / 50)\n",
        "model1.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] training network...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GBLILDVHmbV2",
        "outputId": "a5726f73-a92e-4624-e66f-eaf5571ac3a2"
      },
      "source": [
        "H = model1.fit(trainX, trainY, validation_data=(testX, testY), epochs=38, batch_size=42)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/38\n",
            "11/11 [==============================] - 1s 59ms/step - loss: 1.6056 - accuracy: 0.2557 - val_loss: 1.5799 - val_accuracy: 0.4384\n",
            "Epoch 2/38\n",
            "11/11 [==============================] - 0s 45ms/step - loss: 1.5513 - accuracy: 0.3311 - val_loss: 1.4993 - val_accuracy: 0.4658\n",
            "Epoch 3/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 1.4383 - accuracy: 0.4361 - val_loss: 1.3203 - val_accuracy: 0.4795\n",
            "Epoch 4/38\n",
            "11/11 [==============================] - 0s 45ms/step - loss: 1.3164 - accuracy: 0.4247 - val_loss: 1.2041 - val_accuracy: 0.4863\n",
            "Epoch 5/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 1.2798 - accuracy: 0.4361 - val_loss: 1.2481 - val_accuracy: 0.4863\n",
            "Epoch 6/38\n",
            "11/11 [==============================] - 0s 45ms/step - loss: 1.1665 - accuracy: 0.5091 - val_loss: 1.1090 - val_accuracy: 0.5685\n",
            "Epoch 7/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 1.0676 - accuracy: 0.5457 - val_loss: 0.9772 - val_accuracy: 0.6301\n",
            "Epoch 8/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 1.0300 - accuracy: 0.5685 - val_loss: 1.0161 - val_accuracy: 0.6096\n",
            "Epoch 9/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.9812 - accuracy: 0.5982 - val_loss: 0.9199 - val_accuracy: 0.6096\n",
            "Epoch 10/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.9053 - accuracy: 0.6438 - val_loss: 1.0012 - val_accuracy: 0.5753\n",
            "Epoch 11/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.8609 - accuracy: 0.6598 - val_loss: 0.8609 - val_accuracy: 0.6644\n",
            "Epoch 12/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.7468 - accuracy: 0.7237 - val_loss: 0.8356 - val_accuracy: 0.6918\n",
            "Epoch 13/38\n",
            "11/11 [==============================] - 0s 45ms/step - loss: 0.7208 - accuracy: 0.7260 - val_loss: 0.8338 - val_accuracy: 0.6575\n",
            "Epoch 14/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.6448 - accuracy: 0.7534 - val_loss: 0.7936 - val_accuracy: 0.6712\n",
            "Epoch 15/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.6405 - accuracy: 0.7511 - val_loss: 0.7797 - val_accuracy: 0.7123\n",
            "Epoch 16/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.5823 - accuracy: 0.7831 - val_loss: 0.8598 - val_accuracy: 0.6781\n",
            "Epoch 17/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.6050 - accuracy: 0.7626 - val_loss: 0.7597 - val_accuracy: 0.7466\n",
            "Epoch 18/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.5803 - accuracy: 0.7763 - val_loss: 0.6907 - val_accuracy: 0.7534\n",
            "Epoch 19/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.4937 - accuracy: 0.8288 - val_loss: 0.6019 - val_accuracy: 0.7466\n",
            "Epoch 20/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.4578 - accuracy: 0.8242 - val_loss: 0.6060 - val_accuracy: 0.7808\n",
            "Epoch 21/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.4374 - accuracy: 0.8356 - val_loss: 0.6218 - val_accuracy: 0.7603\n",
            "Epoch 22/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.4036 - accuracy: 0.8516 - val_loss: 0.5910 - val_accuracy: 0.7603\n",
            "Epoch 23/38\n",
            "11/11 [==============================] - 1s 50ms/step - loss: 0.3687 - accuracy: 0.8721 - val_loss: 0.5526 - val_accuracy: 0.7945\n",
            "Epoch 24/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.4155 - accuracy: 0.8288 - val_loss: 0.6736 - val_accuracy: 0.7466\n",
            "Epoch 25/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.4487 - accuracy: 0.8174 - val_loss: 0.5728 - val_accuracy: 0.7603\n",
            "Epoch 26/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.3941 - accuracy: 0.8584 - val_loss: 0.5730 - val_accuracy: 0.7808\n",
            "Epoch 27/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.3294 - accuracy: 0.8836 - val_loss: 0.5667 - val_accuracy: 0.7808\n",
            "Epoch 28/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.3418 - accuracy: 0.8676 - val_loss: 0.5529 - val_accuracy: 0.8014\n",
            "Epoch 29/38\n",
            "11/11 [==============================] - 1s 46ms/step - loss: 0.3179 - accuracy: 0.8744 - val_loss: 0.6028 - val_accuracy: 0.7877\n",
            "Epoch 30/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.2719 - accuracy: 0.9132 - val_loss: 0.6216 - val_accuracy: 0.7740\n",
            "Epoch 31/38\n",
            "11/11 [==============================] - 1s 49ms/step - loss: 0.2448 - accuracy: 0.9178 - val_loss: 0.4880 - val_accuracy: 0.8014\n",
            "Epoch 32/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.2515 - accuracy: 0.9110 - val_loss: 0.5241 - val_accuracy: 0.7808\n",
            "Epoch 33/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.2499 - accuracy: 0.9110 - val_loss: 0.5824 - val_accuracy: 0.7877\n",
            "Epoch 34/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.2308 - accuracy: 0.9178 - val_loss: 0.4525 - val_accuracy: 0.8151\n",
            "Epoch 35/38\n",
            "11/11 [==============================] - 1s 47ms/step - loss: 0.1971 - accuracy: 0.9406 - val_loss: 0.5865 - val_accuracy: 0.8014\n",
            "Epoch 36/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.1817 - accuracy: 0.9406 - val_loss: 0.5780 - val_accuracy: 0.7740\n",
            "Epoch 37/38\n",
            "11/11 [==============================] - 1s 48ms/step - loss: 0.1717 - accuracy: 0.9452 - val_loss: 0.7220 - val_accuracy: 0.7260\n",
            "Epoch 38/38\n",
            "11/11 [==============================] - 1s 50ms/step - loss: 0.1805 - accuracy: 0.9406 - val_loss: 0.5571 - val_accuracy: 0.8082\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "HcGqiOQ7moq3",
        "outputId": "99e1b0a9-8d2b-4eee-a61c-0480e8890536"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(H.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(H.history['accuracy'])\n",
        "plt.plot(H.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(H.history['loss'])\n",
        "plt.plot(H.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BKqnmcNbmu0I",
        "outputId": "40e93502-fe68-4e12-9022-441d26019d5c"
      },
      "source": [
        "print(\"[INFO] evaluating network...\")\n",
        "predictions = model1.predict(testX, batch_size=42)\n",
        "print(classification_report(testY.argmax(axis=1),\n",
        "\tpredictions.argmax(axis=1), target_names=lb.classes_))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating network...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      GMB_01       0.65      1.00      0.79        24\n",
            "      GMB_02       0.81      0.71      0.76        24\n",
            "      GMB_03       0.93      0.96      0.94        26\n",
            "      GMB_04       0.81      0.55      0.65        31\n",
            "      GMB_05       0.88      0.85      0.86        41\n",
            "\n",
            "    accuracy                           0.81       146\n",
            "   macro avg       0.81      0.81      0.80       146\n",
            "weighted avg       0.82      0.81      0.80       146\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}